<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// ReSharper disable All
// <auto-generated />

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace Biaui.Internals
{
    internal static class NumberHelper
    {
<#
foreach (var typeName in new[]{"float", "double", "int"})
{
#>
<# if (typeName != "int") { #>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> DistanceSq(in this ValueTuple<ImmutableVec2_<#= typeName #>, ImmutableVec2_<#= typeName #>> pos)
        {
            var w = pos.Item1.X - pos.Item2.X;
            var h = pos.Item1.Y - pos.Item2.Y;

            return w * w + h * h;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool AreClose(<#= typeName #> value1, <#= typeName #> value2)
        {
<# if (typeName == "float") { #>
            const <#= typeName #> EPSILON = (float)1.4e-45;
<# }else{ #>
            const <#= typeName #> EPSILON = 2.2204460492503131e-016;
<# } #>

            if (value1 == value2)
                return true;

            var eps = (Abs(value1) + Abs(value2) + (<#= typeName #>)10.0) * EPSILON;
            var delta = value1 - value2;

            return (-eps < delta) && (eps > delta);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool AreCloseZero(<#= typeName #> value1)
        {
<# if (typeName == "float") { #>
            const <#= typeName #> EPSILON = (float)1.4e-45;
<# }else{ #>
            const <#= typeName #> EPSILON = 2.2204460492503131e-016;
<# } #>

            if (value1 == (<#= typeName #>)0)
                return true;

            var eps = (Abs(value1) + (<#= typeName #>)10.0) * EPSILON;
            var delta = value1;

            return (-eps < delta) && (eps > delta);
        }
<# } #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Abs(<#= typeName #> value)
            => value > (<#= typeName #>)0
                ? value
                : -value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Clamp01(<#= typeName #> value)
        {
            if (value <= (<#= typeName #>)0)
                return (<#= typeName #>)0;

            if (value >= (<#= typeName #>)1)
                return (<#= typeName #>)1;

            return value;
        }

        /// <summary>
        /// value, min, max
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Clamp(in this ValueTuple<<#= typeName #>, <#= typeName #>, <#= typeName #>> value)
        {
            Debug.Assert(value.Item2 <= value.Item3);

            if (value.Item1 < value.Item2)
                return value.Item2;

            if (value.Item1 > value.Item3)
                return value.Item3;

            return value.Item1;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static (<#= typeName #> Min, <#= typeName #> Max) MinMax(in this ValueTuple<<#= typeName #>, <#= typeName #>> value)
            => value.Item1 < value.Item2
                ? (value.Item1, value.Item2)
                : (value.Item2, value.Item1);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Max(in this ValueTuple<<#= typeName #>, <#= typeName #>> value)
            => value.Item1 > value.Item2
                ? value.Item1
                : value.Item2;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Min(in this ValueTuple<<#= typeName #>, <#= typeName #>> value)
            => value.Item1 < value.Item2
                ? value.Item1
                : value.Item2;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Max(in this ValueTuple<<#= typeName #>, <#= typeName #>, <#= typeName #>> value)
             => ((value.Item1, value.Item2).Max(), value.Item3).Max();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Min(in this ValueTuple<<#= typeName #>, <#= typeName #>, <#= typeName #>> value)
             => ((value.Item1, value.Item2).Min(), value.Item3).Min();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Max(in this ValueTuple<<#= typeName #>, <#= typeName #>, <#= typeName #>, <#= typeName #>> value)
             => (((value.Item1, value.Item2).Max(), value.Item3).Max(), value.Item4).Max();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= typeName #> Min(in this ValueTuple<<#= typeName #>, <#= typeName #>, <#= typeName #>, <#= typeName #>> value)
             => (((value.Item1, value.Item2).Min(), value.Item3).Min(), value.Item4).Min();
<#
       }
#>
    }
}
