<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:biaui="clr-namespace:Biaui">
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrushKey}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushKey}" />
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrushKey}" />
        <Setter Property="Padding" Value="10,3" />
        <Setter Property="Height" Value="{x:Static biaui:Constants.BasicOneLineHeight}" />

        <Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            CornerRadius="{x:Static biaui:Constants.BasicCornerRadius}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            UseLayoutRounding="True">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonActiveBackgroundBrushKey}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonActiveBorderBrushKey}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonActiveForegroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonPressedBackgroundBrushKey}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonPressedBorderBrushKey}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonPressedForegroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource ButtonInactiveBackgroundBrushKey}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonInactiveBorderBrushKey}" />
                <Setter Property="Foreground" Value="{DynamicResource ButtonInactiveForegroundBrushKey}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource ToggleButtonBackgroundBrushKey.IsChecked}" />
                <Setter Property="BorderBrush" Value="{DynamicResource ButtonInactiveBorderBrushKey}" />
                <Setter Property="Foreground" Value="{DynamicResource AccentForegroundBrushKey}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SharpToggleButtonStyle"
           BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="0"
                            CornerRadius="0"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            UseLayoutRounding="True">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
